{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { toast } from 'react-toastify';\nimport React from 'react';\nvar STORAGE_KEY = 'NEXT_ECOMMERCE_STARTER_';\nvar initialState = {\n  cart: [],\n  numberOfItemsInCart: 0,\n  total: 0\n};\nvar SiteContext = /*#__PURE__*/React.createContext();\n\nfunction calculateTotal(cart) {\n  var total = cart.reduce(function (acc, next) {\n    var quantity = next.quantity;\n    acc = acc + JSON.parse(next.price) * quantity;\n    return acc;\n  }, 0);\n  return total;\n}\n\nvar ContextProviderComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ContextProviderComponent, _React$Component);\n\n  var _super = _createSuper(ContextProviderComponent);\n\n  function ContextProviderComponent() {\n    var _this;\n\n    _classCallCheck(this, ContextProviderComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"setItemQuantity\", function (item) {\n      var storageState = JSON.parse(window.localStorage.getItem(STORAGE_KEY));\n      var cart = storageState.cart;\n      var index = cart.findIndex(function (cartItem) {\n        return cartItem.id === item.id;\n      });\n      cart[index].quantity = item.quantity;\n      window.localStorage.setItem(STORAGE_KEY, JSON.stringify({\n        cart: cart,\n        numberOfItemsInCart: cart.length,\n        total: calculateTotal(cart)\n      }));\n\n      _this.forceUpdate();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addToCart\", function (item) {\n      var storageState = JSON.parse(window.localStorage.getItem(STORAGE_KEY));\n      var cart = storageState.cart;\n\n      if (cart.length) {\n        var index = cart.findIndex(function (cartItem) {\n          return cartItem.id === item.id;\n        });\n\n        if (index >= Number(0)) {\n          /* If this item is already in the cart, update the quantity */\n          cart[index].quantity = cart[index].quantity + item.quantity;\n        } else {\n          /* If this item is not yet in the cart, add it */\n          cart.push(item);\n        }\n      } else {\n        /* If no items in the cart, add the first item. */\n        cart.push(item);\n      }\n\n      window.localStorage.setItem(STORAGE_KEY, JSON.stringify({\n        cart: cart,\n        numberOfItemsInCart: cart.length,\n        total: calculateTotal(cart)\n      }));\n      toast(\"Successfully added item to cart!\", {\n        position: toast.POSITION.TOP_LEFT\n      });\n\n      _this.forceUpdate();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeFromCart\", function (item) {\n      var storageState = JSON.parse(window.localStorage.getItem(STORAGE_KEY));\n      var cart = storageState.cart;\n      cart = cart.filter(function (c) {\n        return c.id !== item.id;\n      });\n      window.localStorage.setItem(STORAGE_KEY, JSON.stringify({\n        cart: cart,\n        numberOfItemsInCart: cart.length,\n        total: calculateTotal(cart)\n      }));\n\n      _this.forceUpdate();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearCart\", function () {\n      window.localStorage.setItem(STORAGE_KEY, JSON.stringify(initialState));\n\n      _this.forceUpdate();\n    });\n\n    return _this;\n  }\n\n  _createClass(ContextProviderComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (true) {\n        var storageState = window.localStorage.getItem(STORAGE_KEY);\n\n        if (!storageState) {\n          window.localStorage.setItem(STORAGE_KEY, JSON.stringify(initialState));\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var state = initialState;\n\n      if (true) {\n        var storageState = window.localStorage.getItem(STORAGE_KEY);\n\n        if (storageState) {\n          state = JSON.parse(storageState);\n        }\n      }\n\n      return /*#__PURE__*/_jsx(SiteContext.Provider, {\n        value: _objectSpread(_objectSpread({}, state), {}, {\n          addToCart: this.addToCart,\n          clearCart: this.clearCart,\n          removeFromCart: this.removeFromCart,\n          setItemQuantity: this.setItemQuantity\n        }),\n        children: this.props.children\n      });\n    }\n  }]);\n\n  return ContextProviderComponent;\n}(React.Component);\n\nexport { SiteContext, ContextProviderComponent };","map":null,"metadata":{},"sourceType":"module"}