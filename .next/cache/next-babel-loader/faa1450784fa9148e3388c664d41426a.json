{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { toast } from 'react-toastify';\nimport React from 'react';\nconst STORAGE_KEY = 'NEXT_ECOMMERCE_STARTER_';\nconst initialState = {\n  cart: [],\n  numberOfItemsInCart: 0,\n  total: 0\n};\nconst SiteContext = /*#__PURE__*/React.createContext();\n\nfunction calculateTotal(cart) {\n  const total = cart.reduce((acc, next) => {\n    const quantity = next.quantity;\n    acc = acc + JSON.parse(next.price) * quantity;\n    return acc;\n  }, 0);\n  return total;\n}\n\nclass ContextProviderComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"setItemQuantity\", item => {\n      const storageState = JSON.parse(window.localStorage.getItem(STORAGE_KEY));\n      const {\n        cart\n      } = storageState;\n      const index = cart.findIndex(cartItem => cartItem.id === item.id);\n      cart[index].quantity = item.quantity;\n      window.localStorage.setItem(STORAGE_KEY, JSON.stringify({\n        cart,\n        numberOfItemsInCart: cart.length,\n        total: calculateTotal(cart)\n      }));\n      this.forceUpdate();\n    });\n\n    _defineProperty(this, \"addToCart\", item => {\n      const storageState = JSON.parse(window.localStorage.getItem(STORAGE_KEY));\n      const {\n        cart\n      } = storageState;\n\n      if (cart.length) {\n        const index = cart.findIndex(cartItem => cartItem.id === item.id);\n\n        if (index >= Number(0)) {\n          /* If this item is already in the cart, update the quantity */\n          cart[index].quantity = cart[index].quantity + item.quantity;\n        } else {\n          /* If this item is not yet in the cart, add it */\n          cart.push(item);\n        }\n      } else {\n        /* If no items in the cart, add the first item. */\n        cart.push(item);\n      }\n\n      window.localStorage.setItem(STORAGE_KEY, JSON.stringify({\n        cart,\n        numberOfItemsInCart: cart.length,\n        total: calculateTotal(cart)\n      }));\n      toast(\"Successfully added item to cart!\", {\n        position: toast.POSITION.TOP_LEFT\n      });\n      this.forceUpdate();\n    });\n\n    _defineProperty(this, \"removeFromCart\", item => {\n      const storageState = JSON.parse(window.localStorage.getItem(STORAGE_KEY));\n      let {\n        cart\n      } = storageState;\n      cart = cart.filter(c => c.id !== item.id);\n      window.localStorage.setItem(STORAGE_KEY, JSON.stringify({\n        cart,\n        numberOfItemsInCart: cart.length,\n        total: calculateTotal(cart)\n      }));\n      this.forceUpdate();\n    });\n\n    _defineProperty(this, \"clearCart\", () => {\n      window.localStorage.setItem(STORAGE_KEY, JSON.stringify(initialState));\n      this.forceUpdate();\n    });\n  }\n\n  componentDidMount() {\n    if (false) {\n      const storageState = window.localStorage.getItem(STORAGE_KEY);\n\n      if (!storageState) {\n        window.localStorage.setItem(STORAGE_KEY, JSON.stringify(initialState));\n      }\n    }\n  }\n\n  render() {\n    let state = initialState;\n\n    if (false) {\n      const storageState = window.localStorage.getItem(STORAGE_KEY);\n\n      if (storageState) {\n        state = JSON.parse(storageState);\n      }\n    }\n\n    return /*#__PURE__*/_jsx(SiteContext.Provider, {\n      value: _objectSpread(_objectSpread({}, state), {}, {\n        addToCart: this.addToCart,\n        clearCart: this.clearCart,\n        removeFromCart: this.removeFromCart,\n        setItemQuantity: this.setItemQuantity\n      }),\n      children: this.props.children\n    });\n  }\n\n}\n\nexport { SiteContext, ContextProviderComponent };","map":null,"metadata":{},"sourceType":"module"}